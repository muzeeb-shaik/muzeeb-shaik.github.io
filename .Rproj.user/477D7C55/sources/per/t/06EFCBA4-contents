rm(list = ls())

setwd("D:\\Google Drive\\TAMU\\Projets\\Hari\\Satisfaction Meta\\Write up July 2021\\Study 1")


efficiency <- function(data, variables , labels){
  Z <- lapply(data[variables], factor)
  Z <-data.frame(Z)
  new_Z<- list()
  for (i in 1: length(variables)) {
    variable_name <- variables[i]
    #print(variable_name)
    subset_data <- as.data.frame(Z[i])
    levels <- levels(subset_data[,1])
    if (length(levels) >1){
    EC <- cbind(rep(1, each = length(levels)) , contr.sum(levels(subset_data[,1])))
    SOCC <- orthonormalization(EC)*(length(levels))^(1/2)
    SOCC <- SOCC[,(2:(length(levels)))]
    contrasts( subset_data[,1])<- SOCC
    new_Z[[i]] <- subset_data
  }
  }
  
  new_Z = new_Z %>% discard(is.null)
  new_Z <-  cbind(data['Corr'] , data.frame(new_Z))
  frmla <- as.formula(paste(colnames(new_Z)[1], paste(colnames(new_Z)[2:(ncol(new_Z))], sep = "", 
                                                      collapse = " + "), sep = " ~ "))
  reg <- lm(frmla, data=new_Z)
  coeff <- as.data.frame(reg$coefficients)
  additional_drop <- as.list(names(which(rowSums(is.na(coeff)) > 0)))
  occ_design <- as.data.frame(model.matrix(reg))
  occ_design <- occ_design[,!(names(occ_design) %in% additional_drop)]
  Z <- as.matrix(occ_design)
  ZtZ <- t(Z) %*% Z
  inv_ZtZ <- matrixcalc::matrix.inverse(ZtZ)
  Np <- dim(Z)[1]
  p <- dim(Z)[2]  
  trace <- sum(diag(inv_ZtZ))
  det <- det(inv_ZtZ)
  a_efficiency <- (1/(Np*(trace/p)))*100
  d_efficiency <- (1/(Np*(det^(1/p))))*100
  output <- cbind(a_efficiency,d_efficiency)
  
  return(output)
}

efficiency_by_adding_one_full_fact<- function(data, variables ){
  
  Z <- lapply(data[variables], factor)
  Z <-data.frame(Z)
  hyper_grid <- expand.grid(levels(Z[,1]),levels(Z[,2]),levels(Z[,3]),levels(Z[,4]),levels(Z[,5]),levels(Z[,6]),levels(Z[,7]),levels(Z[,8]),levels(Z[,9]))
  names(hyper_grid)<- variables
  hyper_grid$Corr <- 0
  hyper_grid <- hyper_grid %>% filter_all(all_vars(. != "Can not Assertain" ))
  study_eff <- data.frame()
  for (j in 1 : dim(hyper_grid)[1]){
    # Adding one study at a time and calculating the design efficiency
    data_new <- dplyr::bind_rows(data, hyper_grid[j,])
    add_eff <- efficiency(data =data_new, variables = variables, labels = labels )
    study_eff<- rbind(study_eff,cbind(j,add_eff))
  }
  
  output <- cbind(hyper_grid[variables], study_eff[c( "a_efficiency","d_efficiency")])
  return(output)
}


library(tidyverse)
library(readxl)
library(dplyr)
library(readxl)
library(foreign)
library(data.table)
library(mltools)
library(splitstackshape)
library(matrixcalc)
library(limma)
library(far)


Matrix_Input <- foreign::read.dta("Matrix Input July 22 Stata 12.dta")

Matrix_Input_Customer <-Matrix_Input %>% filter(dv_new == "Retention" | dv_new == "Word of Mouth"|dv_new == "Price Outcomes"|dv_new =="Spending Outcomes") 
Matrix_Input_Firm <-Matrix_Input %>% filter(!(dv_new == "Retention" | dv_new == "Word of Mouth"|dv_new == "Price Outcomes"|dv_new =="Spending Outcomes"))

variables_1 =  c("dv_new" , "GS","B2CB2B" , "Location_new",'CS_Item','CS_scale_new', 'ACSI', 'TopBox','TimePeriod')
labels_1 = c('Outcome','Goods/Services', 'B2C/B2B', 'Location','CS Scale Items', 'CS Scale Points','ACSI','TopBox','TimePeriod')


#### Calculating Efficincices by Year  for Customer Outcomes -----
efficiency_table_1 <- data.frame()
for (i in 2005 : 2021){
  #i = 2005
  print(i)
  data <- filter(Matrix_Input_Firm, Year <= i )
  eff <- efficiency(data =data, variables = variables_1, labels = labels_1 )
  efficiency_table_1<- rbind(efficiency_table_1,cbind(i,eff))
}


# Plot 1 -----
library(ggplot2)


df1 <- data.frame(x=efficiency_table_1$i,y=efficiency_table_1$a_efficiency,type="A-efficieny")
x2 <- seq(1,10)
df2 <- data.frame(x=efficiency_table_1$i,y=efficiency_table_1$d_efficiency,type="D-efficieny")

df <- rbind(df1,df2)
df1$lab <- sub("^", "1981-", df1$x )
plot_labs <- as.list(df1$lab)

ggplot(df,aes(x = x,   y = y, col = type,group = type , label = round(y, digits = 2))) +
  theme(legend.position="bottom")+
  geom_line() +   geom_point() +   geom_text(vjust = -0.5, nudge_y = 0.5)+
  labs(title = "Design Efficiency of Studies on Customer Satisfaction and Firm Outcomes Over Time",
       x = "Time Frame",
       y = "Efficiency (%)",
       color = "Efficiency Type")+theme(plot.title = element_text(hjust = 0.5))+
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 5))+
  scale_x_continuous(limits = c(2005, 2021), breaks = seq(2005, 2021, by = 1), labels = plot_labs )+ 
  theme(axis.text.x = element_text(angle = 0, vjust = 0, hjust=.5)) +
  theme(  plot.title = element_text(size = 16, face = "bold"),
          axis.title = element_text(size = 14, face = "bold"),
          axis.text = element_text(face = "bold"))

# 2006 to 2008 Analysis ----
data <- filter(Matrix_Input_Firm, Year <= 2005 )
data_1 <- filter(Matrix_Input_Firm, Year > 2005 &Year <= 2008)
d_efficiency_based_data <- data.frame()
for (i in 1 : dim(data_1)[1]){
  #i =1 
  print(i)
  eff <- efficiency_by_adding_one_full_fact(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1)
  #eff <- eff_data_full_fact %>% filter_all(all_vars(. != "Can not Assertain" ))
  n_best_d_eff <- eff %>% top_n(n=1, wt = d_efficiency)
  n_best_d_eff$Corr <- 0
  d_efficiency_based_data  <- dplyr::bind_rows(d_efficiency_based_data,n_best_d_eff)
}
# getting random data
Z <- lapply(data[variables_1], factor)
Z <-data.frame(Z)
hyper_grid <- expand.grid(levels(Z[,1]),levels(Z[,2]),levels(Z[,3]),levels(Z[,4]),levels(Z[,5]),levels(Z[,6]))
names(hyper_grid)<- variables_1
hyper_grid$Corr <- 0
hyper_grid <- hyper_grid %>% filter_all(all_vars(. != "Can not Assertain" ))
set.seed(123)
n_random     <- hyper_grid %>% sample_n(size=dim(data_1)[1], replace = TRUE)

# Calculating Efficiencies
efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )
efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 ) 
efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )

efficiency_2005_2008 <- rbind(cbind(time = 2008 , type = "Efficient Design",efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2008 , type = "Random Design",efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2008 , type = "True Design",efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )))

# 2009 to 2011 Analysis ----

data <- filter(Matrix_Input_Firm, Year <= 2008 )
data_1 <- filter(Matrix_Input_Firm, Year > 2008 &Year <= 2011)
d_efficiency_based_data <- data.frame()
for (i in 1 : dim(data_1)[1]){
  print(i)
  eff <- efficiency_by_adding_one_full_fact(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1)
  #eff <- eff_data_full_fact %>% filter_all(all_vars(. != "Can not Assertain" ))
  n_best_d_eff <- eff %>% top_n(n=1, wt = d_efficiency)
  n_best_d_eff$Corr <- 0
  d_efficiency_based_data  <- dplyr::bind_rows(d_efficiency_based_data,n_best_d_eff)
}
# getting random data
Z <- lapply(data[variables_1], factor)
Z <-data.frame(Z)
hyper_grid <- expand.grid(levels(Z[,1]),levels(Z[,2]),levels(Z[,3]),levels(Z[,4]),levels(Z[,5]),levels(Z[,6]))
names(hyper_grid)<- variables_1
hyper_grid$Corr <- 0
hyper_grid <- hyper_grid %>% filter_all(all_vars(. != "Can not Assertain" ))
set.seed(123)
n_random     <- hyper_grid %>% sample_n(size=dim(data_1)[1], replace = TRUE)

# Calculating Efficiencies
efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )
efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 ) 
efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )

efficiency_2008_2011 <- rbind(cbind(time = 2011 , type = "Efficient Design",efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2011 , type = "Random Design",efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2011 , type = "True Design",efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )))



# 2012 to 2014 Analysis ----

data <- filter(Matrix_Input_Firm, Year <= 2011 )
data_1 <- filter(Matrix_Input_Firm, Year > 2011 &Year <= 2014)
d_efficiency_based_data <- data.frame()
for (i in 1 : dim(data_1)[1]){
  print(i)
  eff <- efficiency_by_adding_one_full_fact(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1)
  #eff <- eff_data_full_fact %>% filter_all(all_vars(. != "Can not Assertain" ))
  n_best_d_eff <- eff %>% top_n(n=1, wt = d_efficiency)
  n_best_d_eff$Corr <- 0
  d_efficiency_based_data  <- dplyr::bind_rows(d_efficiency_based_data,n_best_d_eff)
}
# getting random data
Z <- lapply(data[variables_1], factor)
Z <-data.frame(Z)
hyper_grid <- expand.grid(levels(Z[,1]),levels(Z[,2]),levels(Z[,3]),levels(Z[,4]),levels(Z[,5]),levels(Z[,6]))
names(hyper_grid)<- variables_1
hyper_grid$Corr <- 0
hyper_grid <- hyper_grid %>% filter_all(all_vars(. != "Can not Assertain" ))
set.seed(123)
n_random     <- hyper_grid %>% sample_n(size=dim(data_1)[1], replace = TRUE)

# Calculating Efficiencies
efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )
efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 ) 
efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )

efficiency_2011_2014 <- rbind(cbind(time = 2014 , type = "Efficient Design",efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2014 , type = "Random Design",efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2014 , type = "True Design",efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )))

# 2015 to 2017 Analysis ----

data <- filter(Matrix_Input_Firm, Year <= 2014 )
data_1 <- filter(Matrix_Input_Firm, Year > 2014 &Year <= 2017)
d_efficiency_based_data <- data.frame()
for (i in 1 : dim(data_1)[1]){
  print(i)
  eff <- efficiency_by_adding_one_full_fact(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1)
  #eff <- eff_data_full_fact %>% filter_all(all_vars(. != "Can not Assertain" ))
  n_best_d_eff <- eff %>% top_n(n=1, wt = d_efficiency)
  n_best_d_eff$Corr <- 0
  d_efficiency_based_data  <- dplyr::bind_rows(d_efficiency_based_data,n_best_d_eff)
}
# getting random data
Z <- lapply(data[variables_1], factor)
Z <-data.frame(Z)
hyper_grid <- expand.grid(levels(Z[,1]),levels(Z[,2]),levels(Z[,3]),levels(Z[,4]),levels(Z[,5]),levels(Z[,6]))
names(hyper_grid)<- variables_1
hyper_grid$Corr <- 0
hyper_grid <- hyper_grid %>% filter_all(all_vars(. != "Can not Assertain" ))
set.seed(123)
n_random     <- hyper_grid %>% sample_n(size=dim(data_1)[1], replace = TRUE)

# Calculating Efficiencies
efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )
efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 ) 
efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )

efficiency_2014_2017 <- rbind(cbind(time = 2017 , type = "Efficient Design",efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2017 , type = "Random Design",efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2017 , type = "True Design",efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )))


# 2018 to 2021 Analysis ----

data <- filter(Matrix_Input_Firm, Year <= 2017 )
data_1 <- filter(Matrix_Input_Firm, Year > 2017 &Year <= 2021)
d_efficiency_based_data <- data.frame()
for (i in 1 : dim(data_1)[1]){
  print(i)
  eff <- efficiency_by_adding_one_full_fact(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1)
  #eff <- eff_data_full_fact %>% filter_all(all_vars(. != "Can not Assertain" ))
  n_best_d_eff <- eff %>% top_n(n=1, wt = d_efficiency)
  n_best_d_eff$Corr <- 0
  d_efficiency_based_data  <- dplyr::bind_rows(d_efficiency_based_data,n_best_d_eff)
}
# getting random data
Z <- lapply(data[variables_1], factor)
Z <-data.frame(Z)
hyper_grid <- expand.grid(levels(Z[,1]),levels(Z[,2]),levels(Z[,3]),levels(Z[,4]),levels(Z[,5]),levels(Z[,6]))
names(hyper_grid)<- variables_1
hyper_grid$Corr <- 0
hyper_grid <- hyper_grid %>% filter_all(all_vars(. != "Can not Assertain" ))
set.seed(123)
n_random     <- hyper_grid %>% sample_n(size=dim(data_1)[1], replace = TRUE)

# Calculating Efficiencies
efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )
efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 ) 
efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )

efficiency_2017_2021 <- rbind(cbind(time = 2021 , type = "Efficient Design",efficiency(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2021 , type = "Random Design",efficiency(data =dplyr::bind_rows(data,n_random), variables = variables_1, labels = labels_1 )),
                              cbind(time = 2021 , type = "True Design",efficiency(data =dplyr::bind_rows(data,data_1), variables = variables_1, labels = labels_1 )))


# Plot 2 ----

efficiency_2005_2021 <- rbind(efficiency_2005_2008,efficiency_2008_2011,efficiency_2011_2014,efficiency_2014_2017,efficiency_2017_2021)
efficiency_2005_2021 <- as.data.frame(efficiency_2005_2021)
efficiency_2005_2021$time <- as.numeric(paste0(efficiency_2005_2021$time))
efficiency_2005_2021$a_efficiency <- as.numeric(paste0(efficiency_2005_2021$a_efficiency))
efficiency_2005_2021$d_efficiency <- as.numeric(paste0(efficiency_2005_2021$d_efficiency))
efficiency_2005_2021 <- rbind(efficiency_2005_2021, cbind(time = 2005, type = "True Design",efficiency_table_1[1,2:3]))

labs <- sub("^", "1981-", efficiency_2005_2021$time )
plot_labs <- as.list(sort(unique(labs)))

ggplot(efficiency_2005_2021,aes(x = time,   y = d_efficiency , col = type,group = type , label = round(d_efficiency, digits = 2))) +
  theme(legend.position="bottom")+
  geom_line() +   geom_point() +   geom_text(vjust = -0.5, nudge_y = 0.5)+
  labs(title = "Design Efficiency of Studies on Customer Satisfaction and Firm Outcomes Over Time",
       x = "Time Frame",
       y = "D-Efficiency (%)",
       color = "Design Type:")+theme(plot.title = element_text(hjust = 0.5))+
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 5))+
  scale_x_continuous(limits = c(2005, 2021), breaks =c( 2005, 2008, 2011, 2014, 2017 ,2021), labels = plot_labs )+ 
  theme(axis.text.x = element_text(angle = 0, vjust = 0, hjust=.5)) +
  theme(  plot.title = element_text(size = 16, face = "bold"),
          axis.title = element_text(size = 14, face = "bold"),
          axis.text = element_text(face = "bold"))
# Next 30 best studies

data <- filter(Matrix_Input_Firm, Year <= 2021)
d_efficiency_based_data <- data.frame()
for (i in 1 : 30){
  print(i)
  eff <- efficiency_by_adding_one_full_fact(data =dplyr::bind_rows(data,d_efficiency_based_data), variables = variables_1)
  #eff <- eff_data_full_fact %>% filter_all(all_vars(. != "Can not Assertain" ))
  n_best_d_eff <- eff %>% top_n(n=1, wt = d_efficiency)
  n_best_d_eff$Corr <- 0
  d_efficiency_based_data  <- dplyr::bind_rows(d_efficiency_based_data,n_best_d_eff)
}
library(xlsx)
write.xlsx(d_efficiency_based_data, "30 Next Best Studies based on 1981-2021 Firm Outcomes.xlsx")